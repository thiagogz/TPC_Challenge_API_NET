{
	"info": {
		"_postman_id": "3b2cc224-b8c2-4621-9168-1f805167bd34",
		"name": "LesSoft API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29966920",
		"_collection_link": "https://tpc-challenge.postman.co/workspace/TPC-Challenge-API-Ve%C3%ADculos~32d04b00-9c82-4872-aa4a-9bc340031b03/collection/29966920-3b2cc224-b8c2-4621-9168-1f805167bd34?action=share&source=collection_link&creator=29966920"
	},
	"item": [
		{
			"name": "POST Campanhas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"campanhaid\": 6,\r\n  \"masterid\": 1,\r\n  \"clusterid\": 1,\r\n  \"titulo\": \"teste\",\r\n  \"conteudo\": \"teste\",\r\n  \"descricao\": \"teste\",\r\n  \"canaltipo\": 1,\r\n  \"cluster\": null,\r\n  \"master\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Campanha",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Campanha"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Categorias",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"categoriaid\": 6,\r\n  \"nome\": \"teste\",\r\n  \"descricao\": \"teste\",\r\n  \"ativo\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Categoria",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Categoria"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Cluster",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"clusterid\": 6,\r\n  \"name\": \"teste\",\r\n  \"descricao\": \"teste\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Cluster",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Cluster"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Compras",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"compraid\": 6,\r\n  \"usersid\": 1,\r\n  \"pdvid\": 1,\r\n  \"valor\": 1000,\r\n  \"datacompra\": \"2024-09-14T20:31:28.007Z\",\r\n  \"pdv\": null,\r\n  \"users\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Compra",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Compra"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Credit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"creditid\": 6,\r\n  \"valor\": 1000,\r\n  \"datacredito\": \"2024-09-14T20:48:48.939Z\",\r\n  \"dataexpiracao\": \"2024-09-14T20:48:48.939Z\",\r\n  \"utilizado\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Credit",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Credit"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST CreditCompra",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"creditid\": 3,\r\n  \"compraid\": 4,\r\n  \"compra\": null,\r\n  \"credit\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/CreditCompra",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"CreditCompra"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Loja",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"pdvid\": 6,\r\n  \"nomeloja\": \"teste\",\r\n  \"endereco\": \"teste\",\r\n  \"numero\": 10,\r\n  \"complemento\": \"teste\",\r\n  \"cep\": \"teste\",\r\n  \"ativo\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Loja",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Loja"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Notificação",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"notificacoesid\": 6,\r\n  \"pdvid\": 2,\r\n  \"titulo\": \"teste\",\r\n  \"mensagem\": \"teste\",\r\n  \"dataenvio\": \"2024-09-14T21:00:20.747Z\",\r\n  \"pdv\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Notificacao",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Notificacao"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Pontos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"pointid\": 6,\r\n  \"valor\": 1000,\r\n  \"datacreditado\": \"2024-09-14T21:02:42.457Z\",\r\n  \"dataexpirado\": \"2024-09-14T21:02:42.457Z\",\r\n  \"utilizado\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Ponto",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Ponto"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST PontosCompra",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"compraid\": 2,\r\n  \"pointid\": 4,\r\n  \"compra\": null,\r\n  \"point\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/PontosCompra",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"PontosCompra"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Produto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"produtoid\": 6,\r\n  \"pdvid\": 2,\r\n  \"categoriaid\": 2,\r\n  \"nome\": \"teste\",\r\n  \"descricao\": \"teste\",\r\n  \"valor\": 2000,\r\n  \"ativo\": \"s\",\r\n  \"categoria\": null,\r\n  \"pdv\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Produto",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Produto"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"usersid\": 6,\r\n  \"nome\": \"teste\",\r\n  \"sobrenome\": \"teste\",\r\n  \"email\": \"teste\",\r\n  \"password\": \"teste\",\r\n  \"telefone\": 20,\r\n  \"endereco\": \"teste\",\r\n  \"numero\": 20,\r\n  \"complemento\": \"teste\",\r\n  \"ativo\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/User",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST UserCluster",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userclusterid\": 6,\r\n  \"clusterid\": 2,\r\n  \"userid\": 2,\r\n  \"cluster\": null,\r\n  \"user\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/UserCluster",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"UserCluster"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Usermaster",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"masterid\": 6,\r\n  \"nome\": \"teste\",\r\n  \"sobrenome\": \"teste\",\r\n  \"email\": \"teste\",\r\n  \"password\": \"teste\",\r\n  \"dataregistro\": \"2024-09-10T21:11:26.377Z\",\r\n  \"ativo\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Usermaster",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Usermaster"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST UserPdv",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userpdvid\": 6,\r\n  \"pdvid\": 1,\r\n  \"nome\": \"teste\",\r\n  \"sobrenome\": \"teste\",\r\n  \"email\": \"teste\",\r\n  \"password\": \"teste\",\r\n  \"dataregistro\": \"2024-09-10T21:13:49.993Z\",\r\n  \"ativo\": \"s\",\r\n  \"pdv\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/UserPdv",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"UserPdv"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Campanhas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"campanhaid\": 6,\r\n  \"masterid\": 2,\r\n  \"clusterid\": 2,\r\n  \"titulo\": \"teste2\",\r\n  \"conteudo\": \"teste2\",\r\n  \"descricao\": \"teste2\",\r\n  \"canaltipo\": 1,\r\n  \"cluster\": null,\r\n  \"master\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Campanha",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Campanha"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Categorias",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"categoriaid\": 6,\r\n  \"nome\": \"teste2\",\r\n  \"descricao\": \"teste2\",\r\n  \"ativo\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Categoria",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Categoria"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Cluster",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"clusterid\": 6,\r\n  \"name\": \"teste2\",\r\n  \"descricao\": \"teste2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Cluster",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Cluster"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Compras",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"compraid\": 6,\r\n  \"usersid\": 2,\r\n  \"pdvid\": 2,\r\n  \"valor\": 4000,\r\n  \"datacompra\": \"2024-09-14T20:31:28.007Z\",\r\n  \"pdv\": null,\r\n  \"users\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Compra",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Compra"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Credit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"creditid\": 6,\r\n  \"valor\": 7000,\r\n  \"datacredito\": \"2024-09-10T20:48:48.939Z\",\r\n  \"dataexpiracao\": \"2024-09-10T20:48:48.939Z\",\r\n  \"utilizado\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Credit",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Credit"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT CreditCompra",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"creditid\": 4,\r\n  \"compraid\": 2,\r\n  \"compra\": null,\r\n  \"credit\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/CreditCompra",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"CreditCompra"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Loja",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"pdvid\": 6,\r\n  \"nomeloja\": \"teste2\",\r\n  \"endereco\": \"teste2\",\r\n  \"numero\": 10222,\r\n  \"complemento\": \"teste2\",\r\n  \"cep\": \"teste2\",\r\n  \"ativo\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Loja",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Loja"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Notificação",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"notificacoesid\": 6,\r\n  \"pdvid\": 3,\r\n  \"titulo\": \"teste2\",\r\n  \"mensagem\": \"teste2\",\r\n  \"dataenvio\": \"2024-09-14T21:00:20.747Z\",\r\n  \"pdv\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Notificacao",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Notificacao"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Ponto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"pointid\": 6,\r\n  \"valor\": 5000,\r\n  \"datacreditado\": \"2024-09-20T21:02:42.457Z\",\r\n  \"dataexpirado\": \"2024-09-20T21:02:42.457Z\",\r\n  \"utilizado\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Ponto",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Ponto"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT PontosCompra",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"compraid\": 4,\r\n  \"pointid\": 5,\r\n  \"compra\": null,\r\n  \"point\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/PontosCompra",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"PontosCompra"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Produto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"produtoid\": 6,\r\n  \"pdvid\": 3,\r\n  \"categoriaid\": 3,\r\n  \"nome\": \"teste2\",\r\n  \"descricao\": \"teste2\",\r\n  \"valor\": 55000,\r\n  \"ativo\": \"s\",\r\n  \"categoria\": null,\r\n  \"pdv\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Produto",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Produto"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"usersid\": 6,\r\n  \"nome\": \"teste2\",\r\n  \"sobrenome\": \"teste2\",\r\n  \"email\": \"teste2\",\r\n  \"password\": \"teste2\",\r\n  \"telefone\": 400,\r\n  \"endereco\": \"teste2\",\r\n  \"numero\": 400,\r\n  \"complemento\": \"teste2\",\r\n  \"ativo\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/User",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT UserCluster",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userclusterid\": 6,\r\n  \"clusterid\": 3,\r\n  \"userid\": 3,\r\n  \"cluster\": null,\r\n  \"user\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/UserCluster",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"UserCluster"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Usermaster",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"masterid\": 6,\r\n  \"nome\": \"teste2\",\r\n  \"sobrenome\": \"teste2\",\r\n  \"email\": \"teste2\",\r\n  \"password\": \"teste2\",\r\n  \"dataregistro\": \"2024-09-20T21:11:26.377Z\",\r\n  \"ativo\": \"s\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/Usermaster",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"Usermaster"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT UserPdv",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, sigla, nome, and regiao\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('sigla');\r",
							"        pm.expect(item).to.have.property('nome');\r",
							"        pm.expect(item).to.have.property('regiao');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sigla and nome must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.sigla).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Sigla should not be empty\");\r",
							"    pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nome should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"// Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"   \r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response data should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id and sigla fields are unique within the response data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const idSet = new Set();\r",
							"    const siglaSet = new Set();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(idSet.has(item.id)).to.be.false;\r",
							"        pm.expect(siglaSet.has(item.sigla)).to.be.false;\r",
							"        \r",
							"        idSet.add(item.id);\r",
							"        siglaSet.add(item.sigla);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao object has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao).to.be.an('object');\r",
							"        pm.expect(item.regiao).to.have.property('id');\r",
							"        pm.expect(item.regiao).to.have.property('sigla');\r",
							"        pm.expect(item.regiao).to.have.property('nome');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Regiao ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.regiao.id).to.be.a('number').and.to.satisfy((num) => num >= 0, \"Regiao ID should be a non-negative integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify 'nome' field is a non-empty string for each item\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userpdvid\": 6,\r\n  \"pdvid\": 4,\r\n  \"nome\": \"teste2\",\r\n  \"sobrenome\": \"teste2\",\r\n  \"email\": \"teste2\",\r\n  \"password\": \"teste2\",\r\n  \"dataregistro\": \"2024-09-20T21:13:49.993Z\",\r\n  \"ativo\": \"s\",\r\n  \"pdv\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:7051/api/UserPdv",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "7051",
					"path": [
						"api",
						"UserPdv"
					]
				}
			},
			"response": []
		}
	]
}